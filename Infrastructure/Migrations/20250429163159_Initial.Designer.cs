// <auto-generated />
using System;
using System.Collections.Generic;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250429163159_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<byte>("DiscountPercentage")
                        .HasColumnType("smallint");

                    b.Property<bool>("HasDiscount")
                        .HasColumnType("boolean");

                    b.Property<byte?>("IgCarouselMediaCount")
                        .HasColumnType("smallint");

                    b.Property<string>("IgCode")
                        .HasColumnType("text");

                    b.Property<long?>("IgCommentCount")
                        .HasColumnType("bigint");

                    b.Property<string>("IgDisplayUrl")
                        .HasColumnType("text");

                    b.Property<string>("IgId")
                        .HasColumnType("text");

                    b.Property<bool?>("IgIsVideo")
                        .HasColumnType("boolean");

                    b.Property<long?>("IgLikeCount")
                        .HasColumnType("bigint");

                    b.Property<string>("IgThumbnailSrc")
                        .HasColumnType("text");

                    b.Property<string>("IgVideoUrl")
                        .HasColumnType("text");

                    b.Property<List<string>>("Images")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNew")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<long>("Stock")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IgCode")
                        .IsUnique();

                    b.HasIndex("IgId")
                        .IsUnique();

                    b.HasIndex("ShopId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Domain.Entities.ProductCategory", b =>
                {
                    b.Property<decimal>("ProductId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("Domain.Entities.ProductIgCarouselMedia", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("DisplayUrl")
                        .HasColumnType("text");

                    b.Property<string>("IgId")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool?>("IsVideo")
                        .HasColumnType("boolean");

                    b.Property<byte>("Order")
                        .HasColumnType("smallint");

                    b.Property<decimal>("ProductId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductIgCarouselMedia");
                });

            modelBuilder.Entity("Domain.Entities.Shop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("IgFollowers")
                        .HasColumnType("bigint");

                    b.Property<string>("IgFullName")
                        .HasColumnType("text");

                    b.Property<string>("IgId")
                        .HasColumnType("text");

                    b.Property<string>("IgUsername")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalProducts")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IgId")
                        .IsUnique();

                    b.HasIndex("IgUsername")
                        .IsUnique();

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("Domain.Entities.ShopCategory", b =>
                {
                    b.Property<long>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("ShopId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ShopCategory");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int?>("LastOtp")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<long?>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Entities.Caption", "IgCaption", b1 =>
                        {
                            b1.Property<decimal>("ProductId")
                                .HasColumnType("numeric(20,0)");

                            b1.Property<DateTime?>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Id")
                                .HasColumnType("text");

                            b1.Property<string>("Text")
                                .HasColumnType("text");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("Domain.Entities.Location", "IgLocation", b1 =>
                        {
                            b1.Property<decimal>("ProductId")
                                .HasColumnType("numeric(20,0)");

                            b1.Property<string>("AddressJson")
                                .HasColumnType("text");

                            b1.Property<string>("Id")
                                .HasColumnType("text");

                            b1.Property<double?>("Lat")
                                .HasColumnType("double precision");

                            b1.Property<double?>("Lng")
                                .HasColumnType("double precision");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("Domain.Entities.Dimensions", "IgDimensions", b1 =>
                        {
                            b1.Property<decimal>("ProductId")
                                .HasColumnType("numeric(20,0)");

                            b1.Property<int?>("Hieght")
                                .HasColumnType("integer");

                            b1.Property<int?>("Width")
                                .HasColumnType("integer");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("IgCaption");

                    b.Navigation("IgDimensions");

                    b.Navigation("IgLocation");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.ProductIgCarouselMedia", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("ProductIgCarouselMedia")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Entities.Dimensions", "Dimensions", b1 =>
                        {
                            b1.Property<decimal>("ProductIgCarouselMediaId")
                                .HasColumnType("numeric(20,0)");

                            b1.Property<int?>("Hieght")
                                .HasColumnType("integer");

                            b1.Property<int?>("Width")
                                .HasColumnType("integer");

                            b1.HasKey("ProductIgCarouselMediaId");

                            b1.ToTable("ProductIgCarouselMedia");

                            b1.WithOwner()
                                .HasForeignKey("ProductIgCarouselMediaId");
                        });

                    b.Navigation("Dimensions");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Shop", b =>
                {
                    b.HasOne("Domain.Entities.User", "Owner")
                        .WithOne("Shop")
                        .HasForeignKey("Domain.Entities.Shop", "OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entities.ShopCategory", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("ShopCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Shop", "Shop")
                        .WithMany("ShopCategories")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("ProductCategories");

                    b.Navigation("ShopCategories");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("ProductIgCarouselMedia");
                });

            modelBuilder.Entity("Domain.Entities.Shop", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("ShopCategories");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Shop")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
